/*##############################################################################
    
    HPCC SYSTEMS software Copyright (C) 2022 HPCC SystemsÂ®.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
       
       http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
############################################################################## */

// KMeansValidate test modified to be compatible with the OBT with other small changes

/**
  * The use of this code is to validate ECL KMeans Clustering Algorithm against the standard
  * public dataset Iris[1] with known results. As part of the performance evaluation,
  * the result of KMeans clustering analytics is compared to the result generated by a widely
  * used open source implementation SKlearn.cluster.KMeans [2].
  * The python code to generate the result of the SKlearn.cluster.KMeans can be
  * found via the directory 'Test\Validation\Python\sklean_KMeans.py'.
  *
  * References
  * [1] Dua, D. and Karra Taniskidou, E. (2017). UCI Machine Learning Repository
  *     [http://archive.ics.uci.edu/ml]. Irvine, CA: University of California,
  *     School of Information and Computer Science.
  * [2] https://scikit-learn.org/stable/modules/generated/sklearn.cluster.KMeans.html
  */

IMPORT ML_Core;
IMPORT ML_Core.Types;
IMPORT KMEANS;
IMPORT KMEANS.Test;

// Helper Function

STRING GetResult(INTEGER Expected, INTEGER Result) := FUNCTION
  RETURN IF(Expected = Result, 'Pass', 'Expected: ' + Expected + ' Result: ' + Result);
END;

//Data Preperation
//Load Iris Dataset
DSIris := Test.Datasets.DSIris.ds;

//Add ID to each record
ML_Core.AppendSeqId(DSIris, id, DSIrisWId);

//Transform the raw data into Machine Learning Dataframe:
//ML_Core.Types.NumericField
ML_Core.ToField(DSIrisWId, DSIrisWIdWi);

TrainingSample := DSIrisWIdWi(number < 5); //Filter unnecessary attribute not used for clustering

//Three centroids are initialized with 0, 1, 2 as its id respectively
Ids := [1,51,101];
Centroid := PROJECT(TrainingSample(id IN Ids),TRANSFORM(Types.NumericField,
                                        SELF.id := MAP( LEFT.id = 1   => 0,
                                                        LEFT.id = 51  => 1, 2),
                                        SELF := LEFT));

//Set up the parameters
MaxIterations:= 30;
Tolerance := 0.0;

//Train KMeans model with the training sample and centroid
Model := KMEANS.KMeans(MaxIterations, Tolerance).fit(TrainingSample, Centroid);

//Below are the results:
//Coordinates of cluster centers
Centroids := KMEANS.KMeans().Centers(Model);

//Number of iterations run
Total_Iterations := KMEANS.KMeans().iterations(Model);

//Labels of each training sample
Labels := KMEANS.KMeans().Labels(Model);

//Validate the results against the results of sklearn.Cluster.KMeans
ML_Core.ToField(Test.Datasets.DSIris.sklearn_rst, sklearn_rst);

//Validation 1: Coordinates of each cluster center
Compare_Coordinate := JOIN(sklearn_rst,centroids,
                            LEFT.id = RIGHT.id AND LEFT.number = RIGHT.number,
                            TRANSFORM(Types.NumericField,
                            SELF.value := IF((DECIMAL10_8) LEFT.value = (DECIMAL10_8) RIGHT.value,
                                          1,
                                          0),
                            SELF := LEFT), LEFT OUTER);

Expected0s := 0;
Num0s := COUNT(Compare_Coordinate(value = 0));
OUTPUT(GetResult(Expected0s, Num0s), NAMED('IsSameCoordinateTest'));

//Validation 2: Number of iteration runs
sklearn_converge := Test.Datasets.DSIris.sklearn_converge;
OUTPUT(GetResult(sklearn_converge, Total_Iterations[1].iters), NAMED('IsSameNumberRunTest'));

//Validation 3: Label of each sample
SklearnLabels := Test.Datasets.DSIris.sklearn_alleg;
CompareLabel := JOIN(SklearnLabels, labels, LEFT.id = RIGHT.id,
                                      TRANSFORM({INTEGER id, BOOLEAN isSame},
                                      SELF.isSame := IF(LEFT.y = RIGHT.Label, TRUE, FALSE),
                                      SELF := LEFT), LEFT OUTER);

ExpectedDifferences := 0;
NumDifferences := COUNT(CompareLabel(isSame = FALSE));
OUTPUT(GetResult(ExpectedDifferences, NumDifferences), NAMED('IsSameLabelTest'));
